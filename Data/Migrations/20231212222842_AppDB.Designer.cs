// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAppCZN.Data;

#nullable disable

namespace WebAppCZN.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231212222842_AppDB")]
    partial class AppDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebAppCZN.Data.BD.Заявление", b =>
                {
                    b.Property<int>("ID_заявления")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_заявления"));

                    b.Property<int>("ID_личных_данных")
                        .HasColumnType("int");

                    b.Property<DateTime>("Дата_подачи")
                        .HasColumnType("datetime2");

                    b.Property<string>("Комментарий")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Личные_данныеID_личных_данных")
                        .HasColumnType("int");

                    b.Property<bool>("Признание_безработным")
                        .HasColumnType("bit");

                    b.Property<bool>("Результат_подачи")
                        .HasColumnType("bit");

                    b.HasKey("ID_заявления");

                    b.HasIndex("Личные_данныеID_личных_данных");

                    b.ToTable("Заявления");
                });

            modelBuilder.Entity("WebAppCZN.Data.BD.Личные_данные", b =>
                {
                    b.Property<int>("ID_личных_данных")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_личных_данных"));

                    b.Property<int?>("ID_пола")
                        .HasColumnType("int");

                    b.Property<string>("ID_пользователя")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Адрес_регистрации")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Дата_выдачи_паспорта")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Дата_рождения")
                        .HasColumnType("datetime2");

                    b.Property<string>("Имя")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Кем_выдан_паспорт")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Номер_паспорта")
                        .HasColumnType("int");

                    b.Property<string>("Отчество")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Серия_паспорта")
                        .HasColumnType("int");

                    b.Property<string>("Телефон")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Фамилия")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_личных_данных");

                    b.HasIndex("ID_пола");

                    b.ToTable("Личные_данные");
                });

            modelBuilder.Entity("WebAppCZN.Data.BD.Пол", b =>
                {
                    b.Property<int>("ID_пола")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_пола"));

                    b.Property<string>("пол")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.HasKey("ID_пола");

                    b.ToTable("Пол");
                });

            modelBuilder.Entity("WebAppCZN.Data.BD.Тип_занятости", b =>
                {
                    b.Property<int>("ID_тип_занятости")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_тип_занятости"));

                    b.Property<string>("Тип_Занятости")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID_тип_занятости");

                    b.ToTable("Тип_занятости");
                });

            modelBuilder.Entity("График_работы", b =>
                {
                    b.Property<int>("ID_формы_занятости")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_формы_занятости"));

                    b.Property<string>("Форма_занятости")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID_формы_занятости");

                    b.ToTable("График_работы");
                });

            modelBuilder.Entity("Образование", b =>
                {
                    b.Property<int>("Id_образования")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_образования"));

                    b.Property<string>("Образования")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("nvarchar(26)");

                    b.HasKey("Id_образования");

                    b.ToTable("Образование");
                });

            modelBuilder.Entity("Опыт_работы", b =>
                {
                    b.Property<int>("ID_опыта_работы")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_опыта_работы"));

                    b.Property<int>("ID_резюме")
                        .HasColumnType("int");

                    b.Property<DateTime>("Дата_начала_работы")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Дата_окончания")
                        .HasColumnType("datetime2");

                    b.Property<string>("Должность")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Обязанности")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Организация")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool?>("Флаг_удаления")
                        .HasColumnType("bit");

                    b.HasKey("ID_опыта_работы");

                    b.HasIndex("ID_резюме");

                    b.ToTable("Опыт_работы");
                });

            modelBuilder.Entity("Основания_увольнения", b =>
                {
                    b.Property<int>("ID_основания_увольнения")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_основания_увольнения"));

                    b.Property<string>("Основание")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ID_основания_увольнения");

                    b.ToTable("Основания_увольнения");
                });

            modelBuilder.Entity("Резюме", b =>
                {
                    b.Property<int>("ID_резюме")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_резюме"));

                    b.Property<int>("ID_заявления")
                        .HasColumnType("int");

                    b.Property<string>("ID_пользователя")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ID_тип_занятости")
                        .HasColumnType("int");

                    b.Property<int>("ID_формы_занятости")
                        .HasColumnType("int");

                    b.Property<string>("Адрес_места_жительства")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Дата_готовности_к_работе")
                        .HasColumnType("datetime2");

                    b.Property<string>("Желаемая_должность")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("Зарплата")
                        .HasColumnType("int");

                    b.Property<string>("Профессия")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Сфера_деятельности")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool?>("Флаг_удаления")
                        .HasColumnType("bit");

                    b.HasKey("ID_резюме");

                    b.HasIndex("ID_заявления");

                    b.HasIndex("ID_тип_занятости");

                    b.ToTable("Резюме");
                });

            modelBuilder.Entity("Сведения_о_последнем_месте_работы", b =>
                {
                    b.Property<int>("ID_сведения")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_сведения"));

                    b.Property<int?>("ID_заявления")
                        .HasColumnType("int");

                    b.Property<int>("ID_основания_увольнения")
                        .HasColumnType("int");

                    b.Property<DateTime>("Дата_начала_работы")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Дата_увольнения")
                        .HasColumnType("datetime2");

                    b.Property<string>("Наименование_организации")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Номер_приказа_об_увольнении")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ID_сведения");

                    b.HasIndex("ID_заявления");

                    b.HasIndex("ID_основания_увольнения");

                    b.ToTable("Сведения_о_последнем_месте_работы");
                });

            modelBuilder.Entity("Сведения_об_образовании", b =>
                {
                    b.Property<int>("ID_сведения_об_образовании")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_сведения_об_образовании"));

                    b.Property<int>("ID_образования")
                        .HasColumnType("int");

                    b.Property<int?>("ID_резюме")
                        .HasColumnType("int");

                    b.Property<int>("Год_окончания")
                        .HasColumnType("int");

                    b.Property<DateTime>("Дата_выдачи_диплома")
                        .HasColumnType("datetime2");

                    b.Property<int>("Номер_диплома")
                        .HasColumnType("int");

                    b.Property<int?>("ОбразованиеId_образования")
                        .HasColumnType("int");

                    b.Property<int>("Серия_диплома")
                        .HasColumnType("int");

                    b.Property<string>("Специальность")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Учебное_заведение")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID_сведения_об_образовании");

                    b.HasIndex("ID_резюме");

                    b.HasIndex("ОбразованиеId_образования");

                    b.ToTable("Сведения_об_образовании");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAppCZN.Data.BD.Заявление", b =>
                {
                    b.HasOne("WebAppCZN.Data.BD.Личные_данные", "Личные_данные")
                        .WithMany()
                        .HasForeignKey("Личные_данныеID_личных_данных")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Личные_данные");
                });

            modelBuilder.Entity("WebAppCZN.Data.BD.Личные_данные", b =>
                {
                    b.HasOne("WebAppCZN.Data.BD.Пол", "Пол")
                        .WithMany("Личные_Данные")
                        .HasForeignKey("ID_пола");

                    b.Navigation("Пол");
                });

            modelBuilder.Entity("Опыт_работы", b =>
                {
                    b.HasOne("Резюме", "Резюме")
                        .WithMany()
                        .HasForeignKey("ID_резюме")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Резюме");
                });

            modelBuilder.Entity("Резюме", b =>
                {
                    b.HasOne("WebAppCZN.Data.BD.Заявление", "Заявление")
                        .WithMany()
                        .HasForeignKey("ID_заявления")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppCZN.Data.BD.Тип_занятости", "Тип_Занятости")
                        .WithMany("Резюме")
                        .HasForeignKey("ID_тип_занятости")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("График_работы", "График_Работы")
                        .WithMany("Резюме")
                        .HasForeignKey("ID_тип_занятости")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("График_Работы");

                    b.Navigation("Заявление");

                    b.Navigation("Тип_Занятости");
                });

            modelBuilder.Entity("Сведения_о_последнем_месте_работы", b =>
                {
                    b.HasOne("WebAppCZN.Data.BD.Заявление", "Заявление")
                        .WithMany()
                        .HasForeignKey("ID_заявления");

                    b.HasOne("Основания_увольнения", "Основание_увольнения")
                        .WithMany("Сведения_о_последнем_месте_работы")
                        .HasForeignKey("ID_основания_увольнения")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Заявление");

                    b.Navigation("Основание_увольнения");
                });

            modelBuilder.Entity("Сведения_об_образовании", b =>
                {
                    b.HasOne("Резюме", "Резюме")
                        .WithMany()
                        .HasForeignKey("ID_резюме");

                    b.HasOne("Образование", "Образование")
                        .WithMany("СведенияОбОбразовании")
                        .HasForeignKey("ОбразованиеId_образования");

                    b.Navigation("Образование");

                    b.Navigation("Резюме");
                });

            modelBuilder.Entity("WebAppCZN.Data.BD.Пол", b =>
                {
                    b.Navigation("Личные_Данные");
                });

            modelBuilder.Entity("WebAppCZN.Data.BD.Тип_занятости", b =>
                {
                    b.Navigation("Резюме");
                });

            modelBuilder.Entity("График_работы", b =>
                {
                    b.Navigation("Резюме");
                });

            modelBuilder.Entity("Образование", b =>
                {
                    b.Navigation("СведенияОбОбразовании");
                });

            modelBuilder.Entity("Основания_увольнения", b =>
                {
                    b.Navigation("Сведения_о_последнем_месте_работы");
                });
#pragma warning restore 612, 618
        }
    }
}
